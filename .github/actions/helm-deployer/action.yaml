name: Helm Deployer
description: Opens pull request against a given flux managed clusters repo modifying the specified clusters
inputs:
  repository:
    description: Flux repository to open PR against
    required: true
  cluster:
    description: Cluster to modify HelmRelease in
    required: true
  namespace:
    description: Namespace to modify HelmRelease in
    required: true
  file:
    description: File path in filesystem of HelmReleaseCRD (filename must match with filename in flux repository)
    required: true
  token:
    description: Token to access flux repo
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v6
      id: branch_naming
      with:
        result-encoding: string
        retries: 3
        script: |

          // Set loop control variable
          var completed = false

          core.setOutput('pr_available','false')

          // Find project PR that generated this main commit and set branch name
          for await (const response of github.paginate.iterator(
            github.rest.pulls.list,
            {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
            }
          )){
            

            for (const pull of response.data){
              if (pull.merge_commit_sha == context.sha){
                core.setOutput('branch_name',`${pull.head.ref}-${context.repo.repo}`)
                core.setOutput('pr_url', pull.html_url)
                completed = true
                break
              }
            }

            if (completed){
              break
            }
            
          }

          const commit_info = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
              })

          core.setOutput('commit_url',`${commit_info.data.html_url}`)

          // If no PR is found set branch name to feature/<project>-<sha>

          if (!completed){
            core.setOutput('branch_name',`${context.repo.repo}-${context.sha}`)
          }

    - uses: actions/github-script@v6
      id: deployment
      env:
        file_path: ${{ inputs.file }}
        repository: ${{ inputs.repository }}
        cluster: ${{ inputs.cluster }}
        namespace: ${{ inputs.namespace }}
        branch_name: ${{ steps.branch_naming.outputs.branch_name }}
        pr_url: ${{ steps.branch_naming.outputs.pr_url }}
        commit_url: ${{ steps.branch_naming.outputs.commit_url }}
      with:
        github-token: ${{ inputs.token }}
        result-encoding: string
        retries: 3
        script: |

          const fs = require('fs')
          const path = require('path')

          //Read file and get basename
          const file = fs.readFileSync(process.env.file_path, 'utf8');

          const basename = path.basename(process.env.file_path)

          //Convert file to base64
          const bfile = btoa(file)

          //Get main branch sha
          const main_branch = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: process.env.repository,
              ref: 'heads/main',
          })

          //Create branch in flux repo
          const new_branch = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: process.env.repository,
              ref: `refs/heads/${process.env.branch_name}`,
              sha: main_branch.data.object.sha,
          })
          console.log(main_branch)
          console.log(main_branch.data.object.sha)

          //Obtain file's blob sha in the branch
          const current_file = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: process.env.repository,
            path: `clusters/${process.env.cluster}/${process.env.namespace}/${basename}`,
          });

          console.log(current_file)

          //Modify file in this new branch

          const update_response = await github.rest.repos.createOrUpdateFileContents({
            owner: context.repo.owner,
            repo: process.env.repository,
            path: `clusters/${process.env.cluster}/${process.env.namespace}/${basename}`,
            message: `Automatic update clusters/${process.env.cluster}/${process.env.namespace}/${basename} file via ${context.repo.repo} repository event`,
            sha: current_file.data.sha,
            content: bfile,
            branch: new_branch.data.ref
          })

          //Open pull request

          const pr_comment = process.env.pr_url !== '' ? ` [Associated PR](${process.env.pr_url}).` : ''
          
          const pr_commit_comment = process.env.commit_url !== '' ? ` [Associated Commit](${process.env.commit_url}).` : ''

          const pull_request = github.rest.pulls.create({
            owner: context.repo.owner,
            repo: process.env.repository,
            head: new_branch.data.ref,
            base: 'main',
            title: process.env.branch_name,
            body: `Automatic HelmRelease CRD updating via ${context.repo.repo} repository event.${pr_comment}${pr_commit_comment}`
          });